declare namespace Riact {
    type TFuncComponent = (props: any) => JSX.Element;
    type TPatch = {
        action: Symbol;
        payload: JSX.Element | {
            attributes: TObject;
            events: TFuncValObject;
        } | {
            index: number;
            item?: JSX.Element;
        } | Array<TPatch>;
    };
    type TPatchUpdatePropsPayload = {
        attributes: TObject;
        events: TFuncValObject;
    };
    type TPatchInsertPayload = {
        index: number;
        item: JSX.Element;
    };
    type TPatchRemovePayload = {
        index: number;
    };
    type TPatchTree = {
        [key: string]: TPatch;
    };
    type TObject = {
        [key: string]: any;
    };
    type TStrValObject = {
        [key: string]: string;
    };
    type TFunction = (...args: Array<any>) => any;
    type TFuncValObject = {
        [key: string]: TFunction;
    };
    type TRef = {
        current: HTMLElement;
    };
    interface IAppContext {
        pushDirtyStateComponent(comp: IComponent): void;
    }
    interface IComponent {
        virtualNode: JSX.Element;
        appContext: IAppContext;
        render: Riact.TFuncComponent;
        getAppContext(): IAppContext;
        reflectToDom(): void;
        callEffectHooks(): void;
    }
}
declare namespace JSX {
    interface Element {
        tagType: string | Riact.TFuncComponent;
        attributes?: Riact.TObject;
        children?: Array<Element>;
        el?: Node | Riact.IComponent;
        events?: Riact.TFuncValObject;
        key?: string;
        nextSibling?: Element;
        parentNode?: Element;
        patch?: Riact.TPatch;
        ref?: Riact.TRef;
        reserved?: any;
        value?: any;
    }
}
