import VirtualNode from './VirtualNode';
/**
 * Diffable abstract class, any class extends this class shall implement keyed list algorithm,
 * the run method.
 * The child class will later be injected into VirtualNode for diff calculation.
 * A static factory method is provided to get pooled diffable algorithm instance.
 * This design is for code decoupling.
 */
declare abstract class Diffable {
    protected abstract diffKeyedList(list1: Array<VirtualNode>, list2: Array<VirtualNode>, key: string): Riact.TPatch;
    private static ClassInstMap;
    static getInstance(DiffableImpl: {
        new (...args: Array<any>): Diffable;
    }): Diffable;
    constructor();
    protected diffFreeList(oldList: Array<VirtualNode>, newList: Array<VirtualNode>): void;
    run(oldVDom: VirtualNode, newVDom: VirtualNode, key?: string): void;
}
export declare const DiffAlgorithmFactory: (Algo: new (...args: any[]) => Diffable) => PropertyDecorator;
export default Diffable;
