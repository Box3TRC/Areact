"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fragment = exports.jsx = exports.jsxCore = exports.createVBlank = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
const propsInterposer_1 = require("../propsInterposer");
const functionComponentWrapper_1 = require("./functionComponentWrapper");
function createVBlank(value) {
    return { vtype: 'vBlank', debugSig: `blank__${value}` };
}
exports.createVBlank = createVBlank;
function createVText(text) {
    return { vtype: 'vText', text, debugSig: `text__${text}` };
}
function createVElement(tagName, props, children) {
    return {
        vtype: 'vElement',
        tagName,
        props,
        children,
        debugSig: `${tagName}__${children.length}`,
    };
}
function createVComponent(componentWrapper, props, children) {
    return {
        vtype: 'vComponent',
        componentWrapper,
        props,
        children,
        debugSig: `${componentWrapper.name}`,
        state: {},
    };
}
function flattenArrayIfNested(arr) {
    const nested = arr.some((a) => Array.isArray(a));
    if (nested) {
        const res = [];
        for (const a of arr) {
            if (Array.isArray(a)) {
                res.push(...a);
            }
            else {
                res.push(a);
            }
        }
        return res;
    }
    return arr;
}
function convertChildren(sourceChildren) {
    const children = Array.isArray(sourceChildren)
        ? flattenArrayIfNested(sourceChildren)
        : [sourceChildren];
    return children.map((child) => {
        if (child === null || child === undefined || child === false) {
            return createVBlank(child);
        }
        else if (typeof child === 'string' ||
            typeof child === 'number' ||
            typeof child === 'boolean') {
            return createVText(child.toString());
        }
        else {
            return child;
        }
    });
}
function convertPropsChildren(props) {
    if ('children' in props) {
        return convertChildren(props.children);
    }
    else {
        return [];
    }
}
function jsxCore(tagType, props) {
    const skip = props && 'if' in props && !props.if;
    if (skip) {
        return createVBlank(null);
    }
    if (tagType === Fragment) {
        const children = convertPropsChildren(props);
        return { vtype: 'vFragment', children };
    }
    (0, propsInterposer_1.interposeProps)(props, tagType);
    if (typeof tagType === 'function') {
        tagType = (0, functionComponentWrapper_1.getFunctionComponentWrapperCached)(tagType);
    }
    const children = convertPropsChildren(props);
    props = { ...props, children };
    const vnode = typeof tagType === 'object'
        ? createVComponent(tagType, props, children)
        : createVElement(tagType, props, children);
    return vnode;
}
exports.jsxCore = jsxCore;
function jsx(tagType, props, ...children) {
    props ||= {};
    if (children.length > 0) {
        return jsxCore(tagType, { ...props, children });
    }
    else {
        return jsxCore(tagType, props);
    }
}
exports.jsx = jsx;
function Fragment() { }
exports.Fragment = Fragment;
//# sourceMappingURL=jsx.js.map