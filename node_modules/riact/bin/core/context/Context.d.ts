import Component from '../component/Component';
export interface IContextProvider extends Component {
    getValue(): any;
    subscribe(consumer: IContextConsumer): Riact.TFunction;
}
export interface IContextConsumer extends Component {
    ancestorProvider: IContextProvider;
    unsubscriber: Riact.TFunction;
}
export interface IContextComponent {
    initialValue: any;
    Provider: Riact.TFuncComponent;
    Consumer: Riact.TFuncComponent;
}
declare abstract class Context implements Riact.IContext {
    static createContext(initialValue: any): IContextComponent;
    constructor();
    private componentDeclarationMap;
    getComponent(render: Riact.TFuncComponent): typeof Component;
    private dirtyComponentStack;
    pushDirtyComponent(comp: Component): void;
    popDirtyComponent(): Component;
    hasDirtyComponent(): boolean;
}
export default Context;
