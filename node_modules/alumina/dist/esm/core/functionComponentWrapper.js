import { createHookInstance, endHooks, flushHookEffects, startHooks, } from '../hookImpl';
const promise = Promise.resolve();
function doLater(fn) {
    promise.then(fn);
}
function stringifyClasses(classes) {
    if (Array.isArray(classes)) {
        return classes.filter((a) => !!a).join(' ');
    }
    else {
        return classes;
    }
}
function createFunctionComponentWrapper(renderFunction) {
    const fcName = renderFunction.name;
    return {
        name: fcName,
        mount(self, props) {
            // console.log('mount', fcName);
            self.fcsig = fcName;
            self.hook = createHookInstance();
            self.renderWithHook = (props) => {
                startHooks(self.hook);
                const vnode = renderFunction(props);
                if (vnode) {
                    vnode.marker = `${fcName}`;
                }
                if (props.class &&
                    vnode &&
                    (vnode.vtype === 'vElement' || vnode.vtype === 'vComponent')) {
                    const fcClasses = stringifyClasses(props.class);
                    vnode.props.class = vnode.props.class
                        ? `${vnode.props.class} ${fcClasses}`
                        : fcClasses;
                }
                endHooks();
                doLater(() => flushHookEffects(self.hook));
                return vnode;
            };
            return self.renderWithHook(props);
        },
        update(self, props) {
            return self.renderWithHook(props);
        },
        unmount(self) {
            // console.log('unmount', fcName);
            flushHookEffects(self.hook, true);
        },
    };
}
export function getFunctionComponentWrapperCached(renderFunction) {
    if (!renderFunction.__AluminaFunctionComponentWrapper) {
        renderFunction.__AluminaFunctionComponentWrapper =
            createFunctionComponentWrapper(renderFunction);
    }
    return renderFunction.__AluminaFunctionComponentWrapper;
}
//# sourceMappingURL=functionComponentWrapper.js.map