import AppContext from '../context/AppContext';
import { IContextComponent, IContextProvider } from './Context';
import VirtualNode from '../virtualDom/VirtualNode';
export default class Component implements Riact.IComponent {
    static memo(funcComp: Riact.TFuncComponent): Riact.TFuncComponent;
    private readonly stateHooks;
    private readonly contextCompMap;
    private prevEffectHooks;
    private currEffectHooks;
    private prevEffectRelativeStates;
    private currEffectRelativeStates;
    private effectCleanups;
    private initialized;
    private stateHookIndex;
    private waitingContextProviderUpdate;
    afterUnmount: Riact.TFunction;
    constructor(appContext: AppContext, virtualNode: VirtualNode);
    protected isInitialized(): boolean;
    protected shouldComponentUpdate(prevProps?: Riact.TObject): boolean;
    activateWaitingContextProviderUpdate(): void;
    disactivateWaitingContextProviderUpdate(): void;
    isWaitingContextProviderUpdate(): boolean;
    getContextCompMap(): WeakMap<IContextComponent, IContextProvider>;
    /**
     * force render dom, without checking property mutations
     */
    forceRenderDom(): void;
    renderDom(prevProps: Riact.TObject): void;
    reflectToDom(): void;
    useStateHook<T>(state: T): [T, (newState: T) => void];
    useEffect(effect: Riact.TFunction, relativeState: Array<any>): void;
    callEffectHooks(): void;
    private callEffectCleanups;
    unmount(): void;
    virtualNode: VirtualNode;
    readonly appContext: AppContext;
    readonly render: Riact.TFuncComponent;
    getAppContext(): AppContext;
}
