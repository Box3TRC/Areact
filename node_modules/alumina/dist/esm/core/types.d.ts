import { IHookInstance } from '../hookImpl';
export declare type IElementProps = {
    id?: string;
    className?: string;
    [key: string]: any;
};
export declare type IVBlank = {
    vtype: 'vBlank';
    debugSig: string;
    dom?: Comment;
};
export declare type IVText = {
    vtype: 'vText';
    text: string;
    debugSig: string;
    dom?: Text;
};
export declare type IVElement = {
    vtype: 'vElement';
    tagName: string;
    props: IElementProps;
    children: IVNode[];
    debugSig: string;
    marker?: string;
    dom?: Element;
};
export declare type IVFragment = {
    vtype: 'vFragment';
    children: IVNode[];
    dom?: Element;
};
export declare type IProps = {
    [key: string]: any;
};
export declare type IComponentState = {
    fcsig: string;
    hook: IHookInstance;
    renderWithHook: (props: IProps) => IVNode;
};
export declare type IVComponentWrapper = {
    name: string;
    mount: (self: IComponentState, props: IProps) => IVNode | null;
    update: (self: IComponentState, props: IProps) => IVNode | null;
    unmount: (self: IComponentState) => void;
};
export declare type IVComponent = {
    vtype: 'vComponent';
    componentWrapper: IVComponentWrapper;
    props: IProps;
    children: IVNode[];
    debugSig: string;
    state: {
        componentState?: IComponentState;
        renderRes?: IVNode;
    };
    dom?: Node;
    parentDom?: Node;
};
export declare type IVNode = IVBlank | IVText | IVElement | IVComponent | IVFragment;
