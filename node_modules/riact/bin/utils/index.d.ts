export declare const latentSet: (target: any, name: string, value: any) => void;
export declare const applyMixins: (derivedCtor: any, baseCtors: any[]) => void;
export declare const warning: (condition: boolean, message: string) => void;
export declare const isArray: (arg: any) => arg is any[];
export declare const isUndefined: (object: any) => boolean;
export declare const isNull: (object: any) => boolean;
export declare const isNil: (object: any) => boolean;
export declare const isPlainObject: (object: any) => boolean;
export declare const isString: (object: any) => boolean;
export declare const isNumber: (object: any) => boolean;
export declare const isFunction: (object: any) => boolean;
export declare const isEqualObject: (object: Riact.TObject, other: Riact.TObject) => boolean;
export declare const isEqualArray: (array: any[], other: any[]) => boolean;
export declare const pick: (object: Riact.TObject, keys: string | string[]) => Riact.TObject;
export declare const omit: (object: Riact.TObject, keys: string | string[]) => Riact.TObject;
/**
 * flatten a multiple demension array
 * @param arr multiple demension array
 * @deprecated
 * !Array.prototype.flat is a better option
 */
export declare const flattenArray: (arr: any[]) => any[];
/**
 * depth first search algorithm
 * @param node tree object
 * @param key children key name
 * @param handler hanlder function that will be run on every node
 * @param index index of current node
 * @param parentNode parent node
 */
export declare const dfsWalk: (node: Riact.TObject, key: string, handler: Riact.TFunction, index?: number, parentNode?: Riact.TObject) => void;
/**
 * calculate longest increasing subsequence (only for positive numbers)
 * @param arr array of number
 */
export declare const calcLis: (arr: number[]) => number[];
/**
 * deep clone a object or an array
 * @param o value to be cloned
 */
export declare function deepClone(o: any): any;
/**
 * breadth first search algorithm
 * @param node tree object
 * @param key children key name
 * @param handler hanlder function that will be run on every node
 */
export declare const bfsWalk: (node: Riact.TObject, key: string, handler: Riact.TFunction) => void;
