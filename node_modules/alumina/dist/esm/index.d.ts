import './jsxTypes';
import { createContext, useContext } from './contextApi';
import { Fragment, jsx } from './core';
import { applyGlobalStyle, css, styled } from './cssInJs';
import { IHookRefObject, useCallback, useEffect, useInlineEffect, useLocal, useMemo, useRef, useState } from './hookImpl';
import { domStyled, effectOnMount, useMemoWithArgs } from './extensions';
export { jsx, css, styled, applyGlobalStyle, useState, useLocal, useMemo, useCallback, useEffect, useInlineEffect, useRef, createContext, useContext, Fragment, IHookRefObject, domStyled, useMemoWithArgs, effectOnMount, };
export declare type FC<T extends {} = {}> = (props: T) => JSX.Element | null;
export declare type AluminaChild = JSX.Element | string;
export declare type AluminaChildren = AluminaChild | AluminaChild[];
export declare type AluminaNode = AluminaChild;
export declare function rerender(): void;
export declare function asyncRerender(): void;
export declare function render(renderFn: () => JSX.Element, parentDomNode: HTMLElement | null): void;
