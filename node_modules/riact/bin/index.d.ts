import './declarations';
import AppContext from './core/context/AppContext';
import Context from './core/component/Context';
import VirtualNode from './core/virtualDom/VirtualNode';
import Component from './core/component/Component';
export default class Riact extends AppContext implements Riact.IComponent {
    static createContext: typeof Context.createContext;
    static createElement: typeof VirtualNode.createElement;
    static createRef: () => Riact.TRef;
    static memo: typeof Component.memo;
    static useState: <T>(state: T) => [T, (newState: T) => void];
    static useEffect: (effect: Riact.TFunction, relativeState?: any[]) => void;
    static useContext: (contextComp: import("./core/component/Context").IContextComponent) => any;
    static useContextComposer: typeof Context.useContextComposer;
    static Fragment: string;
    static render(virtualNode: JSX.Element, rootDom: HTMLElement): Riact;
    constructor(virtualNode: VirtualNode, rootDom: HTMLElement);
    reflectToDom(): void;
    callEffectHooks(): void;
    virtualNode: VirtualNode;
    readonly appContext: AppContext;
    render(): JSX.Element;
    getAppContext(): Riact.IAppContext;
}
export declare const useState: <T>(state: T) => [T, (newState: T) => void];
export declare const useEffect: (effect: Riact.TFunction, relativeState?: any[]) => void;
export declare const useContext: (contextComp: import("./core/component/Context").IContextComponent) => any;
export declare const useContextComposer: typeof Context.useContextComposer;
